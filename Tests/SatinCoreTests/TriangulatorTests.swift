//
//  TriangulatorTests.swift
//  
//
//  Created by Taylor Holliday on 3/21/22.
//

import XCTest
import SatinCore

class TriangulatorTests: XCTestCase {
    
    // 'B'
    let paths = [
        [(2.765625, 3.312500), (2.998047, 3.321045), (3.203125, 3.346680), (3.380859, 3.389404), (3.459473, 3.417175), (3.531250, 3.449219), (3.583282, 3.477417), (3.631958, 3.508301), (3.677277, 3.541870), (3.719238, 3.578125), (3.757843, 3.617065), (3.793091, 3.658691), (3.824982, 3.703003), (3.853516, 3.750000), (3.878693, 3.799683), (3.900513, 3.852051), (3.918976, 3.907104), (3.934082, 3.964844), (3.954224, 4.088379), (3.960938, 4.222656), (3.953796, 4.357544), (3.932373, 4.480957), (3.916306, 4.538361), (3.896667, 4.592896), (3.873459, 4.644562), (3.846680, 4.693359), (3.816330, 4.739288), (3.782410, 4.782349), (3.744919, 4.822540), (3.703857, 4.859863), (3.659225, 4.894318), (3.611023, 4.925903), (3.559250, 4.954620), (3.503906, 4.980469), (3.435547, 5.006104), (3.359375, 5.028320), (3.183594, 5.062500), (2.976562, 5.083008), (2.738281, 5.089844), (1.351562, 5.089844), (1.351562, 4.201172), (1.351562, 3.312500), ],
        [(3.027344, 0.664062), (3.199646, 0.670532), (3.359131, 0.689941), (3.505798, 0.722290), (3.639648, 0.767578), (3.760681, 0.825806), (3.816391, 0.859772), (3.868896, 0.896973), (3.918198, 0.937408), (3.964294, 0.981079), (4.007187, 1.027985), (4.046875, 1.078125), (4.091736, 1.145264), (4.130615, 1.215820), (4.163513, 1.289795), (4.190430, 1.367188), (4.211365, 1.447998), (4.226318, 1.532227), (4.235291, 1.619873), (4.238281, 1.710938), (4.229553, 1.860962), (4.218643, 1.931305), (4.203369, 1.998535), (4.183731, 2.062653), (4.159729, 2.123657), (4.131363, 2.181549), (4.098633, 2.236328), (4.061539, 2.287994), (4.020081, 2.336548), (3.974258, 2.381989), (3.924072, 2.424316), (3.869522, 2.463531), (3.810608, 2.499634), (3.679688, 2.562500), (3.519287, 2.615479), (3.334961, 2.653320), (3.126709, 2.676025), (2.894531, 2.683594), (1.351562, 2.683594), (1.351562, 1.673828), (1.351562, 0.664062), (2.189453, 0.664062), ],
        [(0.589844, 5.738281), (1.411458, 5.738281), (2.233073, 5.738281), (3.054688, 5.738281), (3.297546, 5.728882), (3.522217, 5.700684), (3.728699, 5.653687), (3.916992, 5.587891), (4.004318, 5.547943), (4.087097, 5.503296), (4.165329, 5.453949), (4.239014, 5.399902), (4.308151, 5.341156), (4.372742, 5.277710), (4.432785, 5.209564), (4.488281, 5.136719), (4.546875, 5.046143), (4.597656, 4.952148), (4.640625, 4.854736), (4.675781, 4.753906), (4.703125, 4.649658), (4.722656, 4.541992), (4.734375, 4.430908), (4.738281, 4.316406), (4.733459, 4.183716), (4.718994, 4.057129), (4.694885, 3.936646), (4.661133, 3.822266), (4.617737, 3.713989), (4.564697, 3.611816), (4.502014, 3.515747), (4.429688, 3.425781), (4.340820, 3.335938), (4.234375, 3.250000), (4.110352, 3.167969), (3.968750, 3.089844), (4.175537, 3.003174), (4.354492, 2.911133), (4.505615, 2.813721), (4.570740, 2.763000), (4.628906, 2.710938), (4.719543, 2.612732), (4.798096, 2.505615), (4.864563, 2.389587), (4.918945, 2.264648), (4.961243, 2.130798), (4.991455, 1.988037), (5.009583, 1.836365), (5.015625, 1.675781), (5.010193, 1.538757), (4.993896, 1.405029), (4.966736, 1.274597), (4.928711, 1.147461), (4.879822, 1.023621), (4.820068, 0.903076), (4.749451, 0.785828), (4.667969, 0.671875), (4.600632, 0.590515), (4.528503, 0.514404), (4.451584, 0.443542), (4.369873, 0.377930), (4.283371, 0.317566), (4.192078, 0.262451), (3.995117, 0.167969), (3.778992, 0.094482), (3.543701, 0.041992), (3.289246, 0.010498), (3.015625, 0.000000), (2.207031, 0.000000), (1.398438, 0.000000), (0.589844, 0.000000), (0.589844, 0.819754), (0.589844, 1.639509), (0.589844, 2.459264), (0.589844, 3.279018), (0.589844, 4.098773), (0.589844, 4.918527), ]
    ]

    func testTriangulatePerf() {
        
        var _lengths: [Int32] = []
        var _paths: [UnsafeMutablePointer<simd_float2>?] = []
        for path in paths {
            _lengths.append( Int32(path.count) )
            let p = UnsafeMutablePointer<simd_float2>.allocate(capacity: path.count)
            for i in 0..<path.count {
                p[i] = SIMD2<Float>(x: Float(path[i].0), y: Float(path[i].1))
            }
            _paths.append(p)
        }
        
        measure {
            for _ in 0..<100 {
                var cData = GeometryData(vertexCount: 0, vertexData: nil, indexCount: 0, indexData: nil)
                triangulate(&_paths, &_lengths, 3, &cData)
                freeGeometryData(&cData)
            }
        }
        
        for path in _paths {
            path?.deallocate()
        }
    }

}
